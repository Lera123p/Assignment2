-> Sort: total_spent  (actual time=0.111..0.111 rows=0 loops=1)
    -> Filter: (total_spent > 5000)  (actual time=0.106..0.106 rows=0 loops=1)
        -> Table scan on <temporary>  (actual time=0.104..0.104 rows=2 loops=1)
            -> Aggregate using temporary table  (actual time=0.103..0.103 rows=2 loops=1)
                -> Nested loop inner join  (cost=1.82 rows=0.333) (actual time=0.0723..0.083 rows=2 loops=1)
                    -> Nested loop inner join  (cost=1.7 rows=0.333) (actual time=0.0685..0.0775 rows=2 loops=1)
                        -> Nested loop inner join  (cost=1.35 rows=1) (actual time=0.063..0.0699 rows=2 loops=1)
                            -> Inner hash join (p.category_id = cat.category_id)  (cost=1 rows=1) (actual time=0.0496..0.0517 rows=2 loops=1)
                                -> Table scan on p  (cost=0.35 rows=3) (actual time=0.0052..0.0063 rows=3 loops=1)
                                -> Hash
                                    -> Filter: (cat.category_name = 'Books')  (cost=0.45 rows=1) (actual time=0.0282..0.0324 rows=1 loops=1)
                                        -> Table scan on cat  (cost=0.45 rows=2) (actual time=0.0259..0.0298 rows=2 loops=1)
                            -> Filter: (op.order_id is not null)  (cost=0.35 rows=1) (actual time=0.0076..0.00865 rows=1 loops=2)
                                -> Index lookup on op using product_id (product_id=p.product_id)  (cost=0.35 rows=1) (actual time=0.00715..0.00805 rows=1 loops=2)
                        -> Filter: ((o.order_date >= DATE'2024-01-01') and (o.customer_id is not null))  (cost=0.283 rows=0.333) (actual time=0.0036..0.0037 rows=1 loops=2)
                            -> Single-row index lookup on o using PRIMARY (order_id=op.order_id)  (cost=0.283 rows=1) (actual time=0.0026..0.0026 rows=1 loops=2)
                    -> Single-row index lookup on c using PRIMARY (customer_id=o.customer_id)  (cost=0.55 rows=1) (actual time=0.0022..0.0022 rows=1 loops=2)
