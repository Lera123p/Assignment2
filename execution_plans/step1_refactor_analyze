-> Sort: total_spent  (actual time=0.108..0.108 rows=0 loops=1)
    -> Filter: (total_spent > 5000)  (actual time=0.103..0.103 rows=0 loops=1)
        -> Table scan on <temporary>  (actual time=0.1..0.101 rows=2 loops=1)
            -> Aggregate using temporary table  (actual time=0.0994..0.0994 rows=2 loops=1)
                -> Nested loop inner join  (cost=1.82 rows=0.333) (actual time=0.0687..0.0798 rows=2 loops=1)
                    -> Nested loop inner join  (cost=1.7 rows=0.333) (actual time=0.0646..0.0741 rows=2 loops=1)
                        -> Nested loop inner join  (cost=1.35 rows=1) (actual time=0.0591..0.0662 rows=2 loops=1)
                            -> Inner hash join (p.category_id = c.category_id)  (cost=1 rows=1) (actual time=0.046..0.0482 rows=2 loops=1)
                                -> Table scan on p  (cost=0.35 rows=3) (actual time=0.0054..0.0067 rows=3 loops=1)
                                -> Hash
                                    -> Filter: (c.category_name = 'Books')  (cost=0.45 rows=1) (actual time=0.0261..0.0301 rows=1 loops=1)
                                        -> Table scan on c  (cost=0.45 rows=2) (actual time=0.0235..0.0271 rows=2 loops=1)
                            -> Filter: (op.order_id is not null)  (cost=0.35 rows=1) (actual time=0.00745..0.00845 rows=1 loops=2)
                                -> Index lookup on op using product_id (product_id=p.product_id)  (cost=0.35 rows=1) (actual time=0.0071..0.0081 rows=1 loops=2)
                        -> Filter: ((orders.order_date >= DATE'2024-01-01') and (orders.customer_id is not null))  (cost=0.283 rows=0.333) (actual time=0.00365..0.0037 rows=1 loops=2)
                            -> Single-row index lookup on orders using PRIMARY (order_id=op.order_id)  (cost=0.283 rows=1) (actual time=0.00265..0.00265 rows=1 loops=2)
                    -> Single-row index lookup on c using PRIMARY (customer_id=orders.customer_id)  (cost=0.55 rows=1) (actual time=0.0024..0.0025 rows=1 loops=2)
