-> Sort: cw.total_spent  (actual time=0.0781..0.0781 rows=0 loops=1)
    -> Stream results  (cost=2.75 rows=0) (actual time=0.0717..0.0717 rows=0 loops=1)
        -> Inner hash join (c.customer_id = cw.customer_id)  (cost=2.75 rows=0) (actual time=0.0705..0.0705 rows=0 loops=1)
            -> Table scan on c  (cost=0.175 rows=2) (never executed)
            -> Hash
                -> Table scan on cw  (cost=2.5..2.5 rows=0) (actual time=0.065..0.065 rows=0 loops=1)
                    -> Materialize CTE customer_wasting  (cost=0..0 rows=0) (actual time=0.0647..0.0647 rows=0 loops=1)
                        -> Filter: (total_spent > 5000)  (actual time=0.0563..0.0563 rows=0 loops=1)
                            -> Table scan on <temporary>  (actual time=0.0542..0.0544 rows=2 loops=1)
                                -> Aggregate using temporary table  (actual time=0.0535..0.0535 rows=2 loops=1)
                                    -> Nested loop inner join  (cost=1.8 rows=1.5) (actual time=0.033..0.0422 rows=2 loops=1)
                                        -> Nested loop inner join  (cost=1.28 rows=1.5) (actual time=0.0271..0.034 rows=2 loops=1)
                                            -> Nested loop inner join  (cost=0.75 rows=1.5) (actual time=0.0185..0.0205 rows=2 loops=1)
                                                -> Covering index lookup on c using idx_categories_name (category_name='Books')  (cost=0.35 rows=1) (actual time=0.0105..0.0112 rows=1 loops=1)
                                                -> Covering index lookup on p using idx_products_category_id (category_id=c.category_id)  (cost=0.4 rows=1.5) (actual time=0.0074..0.0085 rows=2 loops=1)
                                            -> Filter: (op.order_id is not null)  (cost=0.317 rows=1) (actual time=0.0053..0.0065 rows=1 loops=2)
                                                -> Index lookup on op using idx_ordered_product_id (product_id=p.product_id)  (cost=0.317 rows=1) (actual time=0.00495..0.00615 rows=1 loops=2)
                                        -> Filter: (orders.order_date >= DATE'2024-01-01')  (cost=0.317 rows=1) (actual time=0.0035..0.0036 rows=1 loops=2)
                                            -> Single-row index lookup on orders using PRIMARY (order_id=op.order_id)  (cost=0.317 rows=1) (actual time=0.00285..0.00295 rows=1 loops=2)
